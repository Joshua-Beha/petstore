apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: create-fep-for-petstore
  namespace: petstore
  resourceVersion: '172917125'
  generation: 13
spec:
  params:
    - name: storageclass
      type: string
    - name: fepcluster-name
      type: string
  steps:
    - image: >-
        intreg0.your.hostname.here.com:5000/openshift/cli:latest
      name: create-operator-subscription
      resources: {}
      script: |
        #!/bin/bash

        cat <<EOF | oc apply -f -
          apiVersion: v1
          items:
          - apiVersion: operators.coreos.com/v1alpha1
            kind: Subscription
            metadata:
              name: fujitsu-enterprise-postgres-operator
              namespace: $(context.taskRun.namespace)
            spec:
              channel: stable
              installPlanApproval: Automatic
              name: fujitsu-enterprise-postgres-operator
              source: certified-operator-index
              sourceNamespace: openshift-marketplace
          kind: List
          metadata:
            resourceVersion: ""
            selfLink: ""
        EOF
        sleep 120

    - image: >-
        intreg0.your.hostname.here.com:5000/openshift/cli:latest
      name: wait-for-operator-install
      resources: {}
      script: >
        oc wait --for=condition=Ready pod -l name=fep-ansible-operator -n
        $(context.taskRun.namespace)
    - image: >-
        intreg0.your.hostname.here.com:5000/openshift/cli:latest
      name: create-fep-cluster
      resources: {}
      script: |
        #!/bin/bash
        cat <<EOF | oc apply -f -
          kind: FEPCluster
          apiVersion: fep.fujitsu.io/v2
          metadata:
            name: $(params.fepcluster-name)
            namespace: $(context.taskRun.namespace)
          spec:
            fep:
              customAnnotations:
                allDeployments: {}
              forceSsl: true
              image:
                pullPolicy: IfNotPresent
              instances: 1
              mcSpec:
                limits:
                  cpu: 500m
                  memory: 700Mi
                requests:
                  cpu: 200m
                  memory: 512Mi
              podAntiAffinity: false
              monitoring:
                enable: true
              podDisruptionBudget: false
              servicePort: 27500
              syncMode: 'off'
              sysExtraLogging: false
            fepChildCrVal:
              backup:
                image:
                  pullPolicy: IfNotPresent
                mcSpec:
                  limits:
                    cpu: 0.2
                    memory: 300Mi
                  requests:
                    cpu: 0.1
                    memory: 200Mi
                pgbackrestParams: |
                  # if log volume is not defined, log_directory should be
                  # changed to '/database/userdata/data/log'
                  [global]
                  repo1-retention-full=7
                  repo1-retention-full-type=time
                  log-path=/database/log/backup
                postScript: ' '
                preScript: ' '
                schedule:
                  num: 2
                schedule1:
                  schedule: 15 0 * * 0
                  type: full
                schedule2:
                  schedule: 15 0 * * 1-6
                  type: incr
                schedule3:
                  schedule: ' '
                  type: ' '
                schedule4:
                  schedule: ' '
                  type: ' '
                schedule5:
                  schedule: ' '
                  type: ' '
              customPgAudit: |
                # define pg audit custom params here to override defaults.
                # if log volume is not defined, log_directory should be
                # changed to '/database/userdata/data/log'
                [output]
                logger = 'auditlog'
                log_directory = '/database/log/audit'
                log_truncate_on_rotation = on
                log_filename = 'pgaudit-%a.log'
                log_rotation_age = 1d
                log_rotation_size = 0
                [rule]
              customPgHba: |
                # define pg_hba custom rules here to be merged with default rules.
                # TYPE     DATABASE        USER        ADDRESS        METHOD
              customPgParams: >
                # define custom postgresql.conf parameters below to override defaults.

                # Current values are as per default FEP deployment

                shared_preload_libraries='pgx_datamasking,pg_prewarm,pg_stat_statements'

                session_preload_libraries='pg_prewarm'

                max_prepared_transactions = 100

                max_worker_processes = 30

                max_connections = 100

                work_mem = 1MB

                maintenance_work_mem = 12MB

                shared_buffers = 128MB

                effective_cache_size = 384MB

                checkpoint_completion_target = 0.8

                # tcp parameters

                tcp_keepalives_idle = 30

                tcp_keepalives_interval = 10

                tcp_keepalives_count = 3

                # logging parameters in default fep installation

                # if log volume is not defined, log_directory should be

                # changed to '/database/userdata/data/log'

                log_directory = '/database/log'

                log_filename = 'logfile-%a.log'

                log_file_mode = 0600

                log_truncate_on_rotation = on

                log_rotation_age = 1d

                log_rotation_size = 0

                log_checkpoints = on

                log_line_prefix = '%e %t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h'

                log_lock_waits = on

                log_autovacuum_min_duration = 60s

                logging_collector = on

                pgaudit.config_file='/opt/app-root/src/pgaudit-cfg/pgaudit.conf'

                log_replication_commands = on

                log_min_messages = WARNING

                log_destination = csvlog

                # wal_archive parameters in default fep installation

                archive_mode = on

                archive_command = 'pgbackrest --stanza=backupstanza
                --config=/database/userdata/pgbackrest.conf archive-push %p'

                wal_level = replica

                max_wal_senders = 12

                wal_keep_segments = 64

                track_activities = on

                track_counts = on

                password_encryption = 'md5'
              storage:
                archivewalVol:
                  size: 10Gi
                  storageClass: $(params.storageclass)
                backupVol:
                  size: 20Gi
                  storageClass: $(params.storageclass)
                dataVol:
                  size: 25Gi
                  storageClass: $(params.storageclass)
                logVol:
                  size: 2Gi
                  storageClass: $(params.storageclass) 
                tablespaceVol:
                  size: 2Gi
                  storageClass: $(params.storageclass) 
                walVol:
                  size: 20Gi
                  storageClass: $(params.storageclass) 
              sysUsers:
                pgAdminPassword: admin-password
                pgRewindPassword: rewind_password
                pgRewindUser: rewind_user
                pgdb: mydb
                pgpassword: <db-password>
                pgreplpassword: repluserpwd
                pgrepluser: repluser
                pguser: <db-user-name>
                tdepassphrase: tde-passphrase
              systemCertificates:
                cacrt: |-
                  -----BEGIN CERTIFICATE-----
                  <ca certificate data>
                  -----END CERTIFICATE-----
                crt: |-
                  -----BEGIN CERTIFICATE-----
                  <certificate data>
                  -----END CERTIFICATE-----
                key: |-
                  -----BEGIN RSA PRIVATE KEY-----
                  <key data>
                  -----END RSA PRIVATE KEY-----
        EOF
    - image: >-
        intreg0.your.hostname.here.com:5000/openshift/cli:latest
      name: wait-for-fep-cluster
      resources: {}
      script: >
        #!/bin/bash

        set -ex

        #wait for up to 20 minutes for the fep pod to be created
        
        for i in {0..60} ; do 
          
          if oc get pods -n $(context.taskRun.namespace) | grep $(params.fepcluster-name) ; then
        
            break
        
          else
        
            sleep 20
        
          fi

        done

        oc wait --for=condition=Ready pod --all -l fepclustername=$(params.fepcluster-name) --timeout=10m -n $(context.taskRun.namespace)

        sleep 120
